/**
 * @description Enums allow a developer to define a set of named constants.
 * TypeScript provides both numeric and string-based enums.
 *
 * Note : the name enumerate mean name things separately / one by one.
 * */

//Simple Example for Numeric Enums

/** Here the Number Order will be assigned sequentially from 0 to n,
    But if we assign random number then the sequence is generated by that number NOT from 0.
 */
enum Direction {
    Up ,
    Down,
    Left,
    Right,
}


// Note: Here the number will be generated from 20 Not from 0.

// enum Direction {
//     Up = 20 ,
//     Down,
//     Left,
//     Right,
// }

console.log(Direction.Down)

/******** String Based Enums ********/
enum Direction_String_Based {
    Up = "UP",
    Down = "DOWN",
    Left = "LEFT",
    Right = "RIGHT",
}

console.log(Direction_String_Based.Up)


/**
 * Each enum member has a value associated with it which can be either
 *
 * 'constant' or
 *
 * 'computed'.
 * */


/******** Constant Enum Member *******/
// It is the first member in the enum and it has no initializer, in which case itâ€™s assigned the value 0
enum E {
    X,//<- Constant Enum Member.
}
console.log('Constant:',E.X);


/******* Computed Enum Member ******/
enum E1 {
    X,
    Y,
    Z,
}

enum E2 {
    A = 1,
    B,
    C,
}

console.log(`Computed Enum Member ${E1.X} & ${E2.B}`)

/*****************************/



/************ Example for Enums ************/
enum LogLevel {
    ERROR,
    WARN,
    INFO,
    DEBUG,
}

/**
 * This is equivalent to:
 * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';
 */
type LogLevelStrings = keyof typeof LogLevel;

function printImportant(key: LogLevelStrings, message: string) {
    const num = LogLevel[key];
    if (num <= LogLevel.WARN) {
        console.log("Log level key is:", key);
        console.log("Log level value is:", num);
        console.log("Log level message is:", message);
    }
}
printImportant("ERROR", "This is a message");


/****** Enum as a datatype ******/
enum Status{
    NotStated= 'NotStated',
    InProgress = 'InProgress',
    Done = 'Done',
}

let notStartedStatus:Status = Status.NotStated;
notStartedStatus = Status.Done;
console.log(Status.InProgress);
/**********************/


/******* Enums With Interface *******/
enum ShapeKind {
    Circle,
    Square,
}

interface Circle {
    kind: ShapeKind.Circle;
    radius: number;
}

interface Square {
    kind: ShapeKind.Square;
    sideLength: number;
}

// let c: Circle = {
//     kind: ShapeKind.Square,
//     Type 'ShapeKind.Square' is not assignable to type 'ShapeKind.Circle'.
//         radius: 100,
// };


/***********/

// Note : always give Enum name as Enum
